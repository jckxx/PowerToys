name: AutoBuild

on:
  push:
    branches:
      - kkTest
  pull_request:
    branches:
      - kkTest

jobs:
  build:
    name: Build PowerToys
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Verifying Nuget package versions for PowerToys.sln
      run: |
        powershell -c '$solutionPath = "${{ github.workspace }}\PowerToys.sln"; Invoke-Expression -Command "${{ github.workspace }}\.pipelines\verifyNugetPackages.ps1 -solution $solutionPath"'
      shell: pwsh

    - name: Verify Arm64 configuration for PowerToys.sln
      run: |
        powershell -c '$solutionPath = "${{ github.workspace }}\PowerToys.sln"; Invoke-Expression -Command "${{ github.workspace }}\.pipelines\verifyArm64Configuration.ps1 -solution $solutionPath"'
      shell: pwsh

    - name: Verify Arm64 configuration for BugReportTool.sln
      run: |
        powershell -c '$solutionPath = "${{ github.workspace }}\tools\BugReportTool\BugReportTool.sln"; Invoke-Expression -Command "${{ github.workspace }}\.pipelines\verifyArm64Configuration.ps1 -solution $solutionPath"'
      shell: pwsh

    - name: Verify Arm64 configuration for WebcamReportTool.sln
      run: |
        powershell -c '$solutionPath = "${{ github.workspace }}\tools\WebcamReportTool\WebcamReportTool.sln"; Invoke-Expression -Command "${{ github.workspace }}\.pipelines\verifyArm64Configuration.ps1 -solution $solutionPath"'
      shell: pwsh

    - name: Verify Arm64 configuration for StylesReportTool.sln
      run: |
        powershell -c '$solutionPath = "${{ github.workspace }}\tools\StylesReportTool\StylesReportTool.sln"; Invoke-Expression -Command "${{ github.workspace }}\.pipelines\verifyArm64Configuration.ps1 -solution $solutionPath"'
      shell: pwsh

    - name: Verify Arm64 configuration for PowerToysSetup.sln
      run: |
        powershell -c '$solutionPath = "${{ github.workspace }}\installer\PowerToysSetup.sln"; Invoke-Expression -Command "${{ github.workspace }}\.pipelines\verifyArm64Configuration.ps1 -solution $solutionPath"'
      shell: pwsh

    - name: Use .NET 7 SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 7.x

    - name: Ensure NuGet Installer
      run: nuget install -ConfigFile NuGet.config

    - name: Ensure VSTest Platform
      run: nuget install -OutputDirectory '$(Agent.ToolsDirectory)' vstest.console

    - name: Restore NuGet packages for PowerToys.sln
      run: nuget restore PowerToys.sln -ConfigFile NuGet.config -PackagesDirectory $(Build.SourcesDirectory)\packages

    - name: Build PowerToys.sln
      run: msbuild '**\PowerToys.sln' /p:Platform=${{ matrix.platform }} /p:Configuration=${{ matrix.configuration }} ${{ parameters.additionalBuildArguments }}
      env:
        DOTNET_ROOT: /usr/share/dotnet
      shell: pwsh

    - name: Restore NuGet packages for BugReportTool.sln
      run: nuget restore tools/BugReportTool/BugReportTool.sln -ConfigFile NuGet.config -PackagesDirectory $(Build.SourcesDirectory)\tools\BugReportTool\packages

    - name: Build BugReportTool.sln
      run: msbuild '**\BugReportTool.sln' /p:Platform=${{ matrix.platform }} /p:Configuration=${{ matrix.configuration }} ${{ parameters.additionalBuildArguments }}
      env:
        DOTNET_ROOT: /usr/share/dotnet
      shell: pwsh

    - name: Restore NuGet packages for WebcamReportTool.sln
      run: nuget restore tools/WebcamReportTool/WebcamReportTool.sln -ConfigFile NuGet.config -PackagesDirectory $(Build.SourcesDirectory)\tools\WebcamReportTool\packages

    - name: Build WebcamReportTool.sln
      run: msbuild '**\WebcamReportTool.sln' /p:Platform=${{ matrix.platform }} /p:Configuration=${{ matrix.configuration }} ${{ parameters.additionalBuildArguments }}
      env:
        DOTNET_ROOT: /usr/share/dotnet
      shell: pwsh

    - name: Restore NuGet packages for StylesReportTool.sln
      run: nuget restore tools/StylesReportTool/StylesReportTool.sln -ConfigFile NuGet.config -PackagesDirectory $(Build.SourcesDirectory)\tools\StylesReportTool\packages

    - name: Build StylesReportTool.sln
      run: msbuild '**\StylesReportTool.sln' /p:Platform=${{ matrix.platform }} /p:Configuration=${{ matrix.configuration }} ${{ parameters.additionalBuildArguments }}
      env:
        DOTNET_ROOT: /usr/share/dotnet
      shell: pwsh

    - name: Restore NuGet packages for PowerToysSetup.sln
      run: nuget restore installer/PowerToysSetup.sln -ConfigFile NuGet.config -PackagesDirectory $(Build.SourcesDirectory)\installer\packages

    - name: Download and install WiX 3.14 development build
      run: |
        powershell -c '$installerPath = "${{ github.workspace }}\.pipelines\installWiX.ps1"; Invoke-Expression -Command $installerPath'
      shell: pwsh

    - name: Build PowerToys per-machine MSI
      run: msbuild '**\installer\PowerToysSetup.sln' /p:Platform=${{ matrix.platform }} /p:Configuration=${{ matrix.configuration }} /t:PowerToysInstaller ${{ parameters.additionalBuildArguments }}
      env:
        DOTNET_ROOT: /usr/share/dotnet
      shell: pwsh

    - name: Build PowerToys per-machine Bootstrapper
      run: msbuild '**\installer\PowerToysSetup.sln' /p:Platform=${{ matrix.platform }} /p:Configuration=${{ matrix.configuration }} /t:PowerToysBootstrapper ${{ parameters.additionalBuildArguments }}
      env:
        DOTNET_ROOT: /usr/share/dotnet
      shell: pwsh

    - name: Clean installer dir before building per-user installer
      run: git clean -xfd -e *exe -- ./installer/
      shell: bash

    - name: Restore NuGet packages for PowerToysSetup.sln
      run: nuget restore installer/PowerToysSetup.sln -ConfigFile NuGet.config -PackagesDirectory $(Build.SourcesDirectory)\installer\packages

    - name: Build PowerToys per-user MSI
      run: msbuild '**\installer\PowerToysSetup.sln' /p:Platform=${{ matrix.platform }} /p:Configuration=${{ matrix.configuration }} /t:PowerToysInstaller ${{ parameters.additionalBuildArguments }} /p:PerUser=true
      env:
        DOTNET_ROOT: /usr/share/dotnet
      shell: bash

    - name: Build PowerToys per-user Bootstrapper
      run: msbuild '**\installer\PowerToysSetup.sln' /p:Platform=${{ matrix.platform }} /p:Configuration=${{ matrix.configuration }} /t:PowerToysBootstrapper ${{ parameters.additionalBuildArguments }} /p:PerUser=true
      env:
        DOTNET_ROOT: /usr/share/dotnet
      shell: bash

    - name: Audit deps.json files for all applications
      run: |
        powershell -c '$targetDir = "${{ github.workspace }}\$(BuildPlatform)\$(BuildConfiguration)"; Invoke-Expression -Command "${{ github.workspace }}\.pipelines\verifyDepsJsonLibraryVersions.ps1 -targetDir $targetDir"'
      shell: pwsh

    - name: Audit base applications path asset conflicts
      run: |
        powershell -c '$targetDir = "${{ github.workspace }}\$(BuildPlatform)\$(BuildConfiguration)"; Invoke-Expression -Command "${{ github.workspace }}\.pipelines\verifyPossibleAssetConflicts.ps1 -targetDir $targetDir"'
      shell: pwsh

    - name: Audit WinAppSDK applications path asset conflicts
      run: |
        powershell -c '$targetDir = "${{ github.workspace }}\$(BuildPlatform)\$(BuildConfiguration)\WinUI3Apps"; Invoke-Expression -Command "${{ github.workspace }}\.pipelines\verifyPossibleAssetConflicts.ps1 -targetDir $targetDir"'
      shell: pwsh

    - name: Trigger dotnet welcome message
      run: dotnet list $(build.sourcesdirectory)\src\common\Common.UI\Common.UI.csproj package

    - name: Verifying Notice.md and Nuget packages match
      run: |
        powershell -c '$path = "${{ github.workspace }}"; Invoke-Expression -Command "${{ github.workspace }}\.pipelines\verifyNoticeMdAgainstNugetPackages.ps1 -path $path"'
      shell: pwsh
